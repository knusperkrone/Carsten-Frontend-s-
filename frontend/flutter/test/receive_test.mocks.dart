// Mocks generated by Mockito 5.0.16 from annotations
// in chrome_tube/test/receive_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:chrome_tube/playback/src/playback_listeners.dart' as _i4;
import 'package:chrome_tube/playback/src/playback_manager.dart' as _i2;
import 'package:chrome_tube/playback/src/sender_playback_queue.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:playback_core/playback_core.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

/// A class which mocks [PlaybackManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaybackManager extends _i1.Mock implements _i2.PlaybackManager {
  MockPlaybackManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.VolumeEvent> get volumeEvents =>
      (super.noSuchMethod(Invocation.getter(#volumeEvents),
              returnValue: Stream<_i4.VolumeEvent>.empty())
          as _i3.Stream<_i4.VolumeEvent>);
  @override
  _i3.Stream<_i4.PlaybackUIEvent> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.PlaybackUIEvent>.empty())
          as _i3.Stream<_i4.PlaybackUIEvent>);
  @override
  double get trackSeek =>
      (super.noSuchMethod(Invocation.getter(#trackSeek), returnValue: 0.0)
          as double);
  @override
  bool get isRepeating =>
      (super.noSuchMethod(Invocation.getter(#isRepeating), returnValue: false)
          as bool);
  @override
  DateTime get seekTimestamp =>
      (super.noSuchMethod(Invocation.getter(#seekTimestamp),
          returnValue: _FakeDateTime_0()) as DateTime);
  @override
  bool get isShuffled =>
      (super.noSuchMethod(Invocation.getter(#isShuffled), returnValue: false)
          as bool);
  @override
  _i4.SimplePlaybackState get currPlayerState => (super.noSuchMethod(
      Invocation.getter(#currPlayerState),
      returnValue: _i4.SimplePlaybackState.PLAYING) as _i4.SimplePlaybackState);
  @override
  int get trackIndex =>
      (super.noSuchMethod(Invocation.getter(#trackIndex), returnValue: 0)
          as int);
  @override
  List<_i5.PlaybackTrack> get prioTracks =>
      (super.noSuchMethod(Invocation.getter(#prioTracks),
          returnValue: <_i5.PlaybackTrack>[]) as List<_i5.PlaybackTrack>);
  @override
  List<_i5.PlaybackTrack> get queueTracks =>
      (super.noSuchMethod(Invocation.getter(#queueTracks),
          returnValue: <_i5.PlaybackTrack>[]) as List<_i5.PlaybackTrack>);
  @override
  String get playlistName =>
      (super.noSuchMethod(Invocation.getter(#playlistName), returnValue: '')
          as String);
  @override
  set track(_i5.PlaybackTrack? val) =>
      super.noSuchMethod(Invocation.setter(#track, val),
          returnValueForMissingStub: null);
  @override
  set currPlayerState(_i4.SimplePlaybackState? val) =>
      super.noSuchMethod(Invocation.setter(#currPlayerState, val),
          returnValueForMissingStub: null);
  @override
  set isRepeating(bool? val) =>
      super.noSuchMethod(Invocation.setter(#isRepeating, val),
          returnValueForMissingStub: null);
  @override
  set seekTimestamp(DateTime? val) =>
      super.noSuchMethod(Invocation.setter(#seekTimestamp, val),
          returnValueForMissingStub: null);
  @override
  set shuffleState(_i5.ShuffleStateDto? val) =>
      super.noSuchMethod(Invocation.setter(#shuffleState, val),
          returnValueForMissingStub: null);
  @override
  set queue(_i6.SenderPlaybackQueue? val) =>
      super.noSuchMethod(Invocation.setter(#queue, val),
          returnValueForMissingStub: null);
  @override
  set trackSeek(double? seek) =>
      super.noSuchMethod(Invocation.setter(#trackSeek, seek),
          returnValueForMissingStub: null);
  @override
  bool get isBackground =>
      (super.noSuchMethod(Invocation.getter(#isBackground), returnValue: false)
          as bool);
  @override
  set isBackground(bool? _isBackground) =>
      super.noSuchMethod(Invocation.setter(#isBackground, _isBackground),
          returnValueForMissingStub: null);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  set isConnected(bool? val) =>
      super.noSuchMethod(Invocation.setter(#isConnected, val),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<double> volumeUp() =>
      (super.noSuchMethod(Invocation.method(#volumeUp, []),
          returnValue: Future<double>.value(0.0)) as _i3.Future<double>);
  @override
  _i3.Future<double> volumeDown() =>
      (super.noSuchMethod(Invocation.method(#volumeDown, []),
          returnValue: Future<double>.value(0.0)) as _i3.Future<double>);
  @override
  _i3.Future<double> setVolume(double? volume) =>
      (super.noSuchMethod(Invocation.method(#setVolume, [volume]),
          returnValue: Future<double>.value(0.0)) as _i3.Future<double>);
  @override
  String serialize() =>
      (super.noSuchMethod(Invocation.method(#serialize, []), returnValue: '')
          as String);
  @override
  void deserialize(String? source) =>
      super.noSuchMethod(Invocation.method(#deserialize, [source]),
          returnValueForMissingStub: null);
  @override
  void onConnect(_i5.ReadyDto? readyDto) =>
      super.noSuchMethod(Invocation.method(#onConnect, [readyDto]),
          returnValueForMissingStub: null);
  @override
  void onPlayerState(_i5.PlayerStateDto? playerStateDto) =>
      super.noSuchMethod(Invocation.method(#onPlayerState, [playerStateDto]),
          returnValueForMissingStub: null);
  @override
  void onQueue(_i5.PlaybackQueueDto? queueDto) =>
      super.noSuchMethod(Invocation.method(#onQueue, [queueDto]),
          returnValueForMissingStub: null);
  @override
  void onTrackState(_i5.TrackStateDto? trackStateDto) =>
      super.noSuchMethod(Invocation.method(#onTrackState, [trackStateDto]),
          returnValueForMissingStub: null);
  @override
  void onTrackSeek(_i5.SeekDto? seekDto) =>
      super.noSuchMethod(Invocation.method(#onTrackSeek, [seekDto]),
          returnValueForMissingStub: null);
  @override
  void onShuffling(_i5.ShuffleStateDto? shuffleDto) =>
      super.noSuchMethod(Invocation.method(#onShuffling, [shuffleDto]),
          returnValueForMissingStub: null);
  @override
  void onRepeating(_i5.RepeatingDto? repeat) =>
      super.noSuchMethod(Invocation.method(#onRepeating, [repeat]),
          returnValueForMissingStub: null);
  @override
  void onAddPrioDelta(_i5.AddPrioDeltaDto? addDeltaDto) =>
      super.noSuchMethod(Invocation.method(#onAddPrioDelta, [addDeltaDto]),
          returnValueForMissingStub: null);
  @override
  void onMovePrioDelta(_i5.MovePrioDeltaDto? moveDeltaDto) =>
      super.noSuchMethod(Invocation.method(#onMovePrioDelta, [moveDeltaDto]),
          returnValueForMissingStub: null);
  @override
  void onError(_i5.ErrorDto? errorDto) =>
      super.noSuchMethod(Invocation.method(#onError, [errorDto]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> sendTracks(List<_i5.PlaybackTrack>? tracks, int? selected,
          String? playlistName) =>
      (super.noSuchMethod(
          Invocation.method(#sendTracks, [tracks, selected, playlistName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendPlay() =>
      (super.noSuchMethod(Invocation.method(#sendPlay, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendPause() =>
      (super.noSuchMethod(Invocation.method(#sendPause, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendPlayTrack(_i5.PlaybackTrack? track) =>
      (super.noSuchMethod(Invocation.method(#sendPlayTrack, [track]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendStop() =>
      (super.noSuchMethod(Invocation.method(#sendStop, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendNext() =>
      (super.noSuchMethod(Invocation.method(#sendNext, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendPrevious() =>
      (super.noSuchMethod(Invocation.method(#sendPrevious, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendShuffling(bool? isShuffling) =>
      (super.noSuchMethod(Invocation.method(#sendShuffling, [isShuffling]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendRepeating(bool? isRepeating) =>
      (super.noSuchMethod(Invocation.method(#sendRepeating, [isRepeating]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendSeek(int? seekMs) =>
      (super.noSuchMethod(Invocation.method(#sendSeek, [seekMs]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> scheduleFullSync() =>
      (super.noSuchMethod(Invocation.method(#scheduleFullSync, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendAddToPrio(_i5.PlaybackTrack? track) =>
      (super.noSuchMethod(Invocation.method(#sendAddToPrio, [track]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendMove(bool? startPrio, int? startIndex, bool? targetPrio,
          int? targetIndex) =>
      (super.noSuchMethod(
          Invocation.method(
              #sendMove, [startPrio, startIndex, targetPrio, targetIndex]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> sendMsg(String? type, [dynamic payload = r'']) =>
      (super.noSuchMethod(Invocation.method(#sendMsg, [type, payload]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}
